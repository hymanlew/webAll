<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="usermapper" >
  <resultMap id="countMap" type="java.lang.Long"/>
  <resultMap id="baseResultMap" type="hyman.entity.LayuiUser">
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="INTEGER" />
  </resultMap>

  <!--
    集合的多结果集，多 sql 查询:
    1，必须给定一个指定的名称给对应的结果集合，做法是：增加一个“resultSets”属性，并使用逗号作为间隔。
    2，也可以采用级联 collection 的方式，把结果集作为一个属性查出来。
  -->
  <select id="selectAndCount" resultMap="baseResultMap,countMap" resultSets="users,count" parameterType="java.util.Map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM USER
    limit #{start},#{end};

    SELECT COUNT(id) count FROM USER;
  </select>

  <resultMap id="SingleResultMap" type="com.weijin.building.entity.Bank" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <association property="user" javaType="com.weijin.building.entity.User" column="user_id" select="tbl_user.selectByPrimaryKey"></association>
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, remark,user_id,level
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from zh_bank
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectSinglePrimaryKey" resultMap="SingleResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from zh_bank
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from zh_bank
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.weijin.building.entity.Bank" >
    insert into zh_bank (id, name, remark,user_id,level
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR},#{userId,jdbcType=INTEGER}
    , #{level,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.weijin.building.entity.Bank" >
    insert into zh_bank
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="userId!=null">
        user_id,
      </if>
      <if test="level!=null">
        level,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="userId!=null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.weijin.building.entity.Bank" >
    update zh_bank
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="level != null" >
        remark = #{level,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.weijin.building.entity.Bank" >
    update zh_bank
    set name = #{name,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      level = #{level,jdbcType=INTEGER},
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--==================================分割线==========================================-->
  <resultMap id="singleMap" type="com.weijin.building.entity.Bank" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="level" property="level" jdbcType="INTEGER" />
  </resultMap>

  <select id="selectByStatu" resultMap="singleMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from zh_bank
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="findAll" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM zh_bank
    ORDER BY level DESC
  </select>
  <select id="findByUserId" parameterType="com.weijin.building.request.PropSet" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List"/>
    FROM zh_bank
    WHERE user_id = ${obj1}
  </select>
  
  <select id="findByName" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT id from zh_bank WHERE `name` LIKE '%${_parameter}%'
  </select>

  <select id="getBankByContract" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM zh_bank
    WHERE id in (
    SELECT bank_id FROM zh_site WHERE bank_id is NOT NULL
    UNION
    SELECT bank_id FROM zh_subsite WHERE bank_id is NOT NULL
    )
  </select>
</mapper>