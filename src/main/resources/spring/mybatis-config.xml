<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

    <!-- 固定死的配置，引入外部的配置文件及值 -->
    <!--<properties resource="/config/db.properties">-->
        <!--<property name="driver" value="${driverClassName}" />-->
        <!--<property name="url" value="${url}" />-->
        <!--<property name="username" value="${username}" />-->
        <!--<property name="password" value="${password}" />-->
    <!--</properties>-->


    <settings>
        <!--
           在一级缓存中，其最大的共享范围就是一个SqlSession内部，如果多个SqlSession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存
           后，会使用CachingExecutor装饰 Executor，进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询。

           二级缓存开启后，同一个namespace下的所有操作语句，都影响着同一个Cache，即二级缓存被多个SqlSession共享，是一个全局的变量。
           当开启缓存后，数据的查询执行的流程就是 二级缓存 -> 一级缓存 -> 数据库。
        -->
        <setting name="cacheEnabled" value="true"/>

        <!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载 -->
        <setting name="lazyLoadingEnabled" value="true"/>

        <!-- 当启用延迟加载时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则每种属性将会按需要加载 -->
        <setting name="aggressiveLazyLoading" value="false"/>

        <!-- 是否允许多种结果集从一个单独的语句中返回（需要适合的驱动） -->
        <setting name="multipleResultSetsEnabled" value="true"/>

        <!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。-->
        <setting name="useColumnLabel" value="true"/>

        <!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。 -->
        <setting name="useGeneratedKeys" value="true"/>

        <!--指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>

        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。-->
        <setting name="defaultExecutorType" value="SIMPLE"/>

        <!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 -->
        <setting name="defaultStatementTimeout" value="25"/>

        <!--
            当sql查询数据量比较大时候读取操作基本读不出来。开始以为是server端处理太慢。但是在控制台是可以立即返回数据的。于是在应用这边抓包，
            发现也是发送sql后立即有数据返回。但是执行 ResultSet的next方法确实阻塞的。
            查文档翻代码原来mysql驱动默认的行为是需要把整个结果全部读取到内存中才开始允许应用读取结果。显然与期望的行为不一致，期望的行为是
            流的方式读取（可以实时传输并进行数据操作的方式），当结果从myql服务端返回后立即可以读取处理。这样应用就不需要大量内存来存储这个结果
            集（同时也就解决了 JDBC的内存溢出问题）。
            值为结果集中可实时被用于操作的数据行数，条数
        -->
        <!--<setting name="defaultFetchSize" value="100" /> 本项目不支持此参数，暂时不管 -->

        <!-- 是否允许在嵌套语句中使用分页（RowBounds），如果允许使用则设置为false。 -->
        <setting name="safeRowBoundsEnabled" value="false"/>

        <!--
           在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的SQL，MyBatis提供了一级缓存的方案优化这部分场景，
           如果是相同的SQL语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。
        -->
        <setting name="localCacheScope" value="SESSION"/>

        <!-- 当没有为参数提供特定的 JDBC类型时，为空值指定 JDBC类型。某些驱动需要指定列的 JDBC类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER -->
        <setting name="jdbcTypeForNull" value="OTHER"/>

        <!--  指定哪些对象的方法触发一次延迟加载 -->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>

        <!-- 是否开启驼峰式命名，数据库的列名能够映射到去除下划线驼峰命名后的字段名，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn的类似映射。 -->
        <setting name="mapUnderscoreToCamelCase" value="false"/>

        <!--  指定 MyBatis 所用日志的具体实现，未指定时将自动查找，不用设置 -->
        <!--<setting name="logImpl" value="SLF4J"/>-->

        <!--
            指定发现自动映射目标未知列（或者未知属性类型）的行为。
            NONE: 不做任何反应
            WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
            FAILING: 映射失败 (抛出 SqlSessionException)
        -->
        <!--<setting name="autoMappingUnknownColumnBehavior" value="WARNING"/> 本项目不支持此参数，暂时不管 -->


    </settings>

    <!--
        别名定义，它只和xml配置有关，存在的意义仅在于用来减少类完全限定名的冗余，即代表了这个类或者对象。
        当这样配置时，user 可以用在任何使用 com.hyman.entity.User 的地方。
    -->
    <typeAliases>
        <!-- 单独设置别名 -->
        <!--<typeAlias type="com.hyman.entity.User" alias="user" />-->

        <!--
            批量别名定义：指定包名，mybatis自动扫描包中的 java类，在没有注解的情况下，会使用其首字母小写的非限定类名来作为它的别名。
            也可以使用注解自动定义别名，则别名为其注解值（首字母大写或小写都可以）。如 @Alias("user") 在 user类上注解。
            -->
        <package name="com.hyman.entity" />
    </typeAliases>

    <!--SQL映射文件,mybatis的核心，但如果使用的 generator自动生成则就不需要在此配置 -->
    <!--<mappers>-->
        <!--<mapper resource="mapping/*.xml" />-->
    <!--</mappers>-->


    <!--
        MyBatis可以配置成适应多种环境，这种机制有助于将 SQL映射应用于多种数据库之中，现实情况下有多种理由需要这么做。例如开发、测试和生产
        环境需要有不同的配置；或者共享相同 Schema的多个生产数据库， 想使用相同的 SQL映射。许多类似的用例。

        不过要记住：尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一。

        所以如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此
        类推。
    -->
    <environments default="development">
        <environment id="development">
            <!--使用默认的JDBC事务管理-->
            <transactionManager type="JDBC"></transactionManager>

            <!--使用连接池-->
            <!-- 这里会替换为db.properties中的对应字段的值 -->
            <dataSource type="POOLED">
                <property name="driver" value="${driverClassName}" />
                <property name="url" value="${url}" />
                <property name="username" value="${name}" />
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
</configuration>